/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TransferCall,
  TransferCallInterface,
} from "../../contracts/TransferCall";

const _abi = [
  {
    inputs: [],
    name: "Failed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "_data",
        type: "bytes[]",
      },
    ],
    name: "multiTransfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "_data",
        type: "bytes[]",
      },
    ],
    name: "multiTransferSingleAsset",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061064d806100206000396000f3fe6080604052600436106100295760003560e01c806338a9c9931461002e578063c2a1defc1461004a575b600080fd5b61004860048036038101906100439190610331565b610066565b005b610064600480360381019061005f9190610410565b61017d565b005b60005b8484905081101561017657600085858381811061008957610088610470565b5b905060200201602081019061009e919061049f565b73ffffffffffffffffffffffffffffffffffffffff168484848181106100c7576100c6610470565b5b90506020028101906100d991906104db565b6040516100e792919061057d565b6000604051808303816000865af19150503d8060008114610124576040519150601f19603f3d011682016040523d82523d6000602084013e610129565b606091505b5050905080610164576040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508061016f906105cf565b9050610069565b5050505050565b60005b828290508110156102665760008473ffffffffffffffffffffffffffffffffffffffff168484848181106101b7576101b6610470565b5b90506020028101906101c991906104db565b6040516101d792919061057d565b6000604051808303816000865af19150503d8060008114610214576040519150601f19603f3d011682016040523d82523d6000602084013e610219565b606091505b5050905080610254576040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508061025f906105cf565b9050610180565b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261029b5761029a610276565b5b8235905067ffffffffffffffff8111156102b8576102b761027b565b5b6020830191508360208202830111156102d4576102d3610280565b5b9250929050565b60008083601f8401126102f1576102f0610276565b5b8235905067ffffffffffffffff81111561030e5761030d61027b565b5b60208301915083602082028301111561032a57610329610280565b5b9250929050565b6000806000806040858703121561034b5761034a61026c565b5b600085013567ffffffffffffffff81111561036957610368610271565b5b61037587828801610285565b9450945050602085013567ffffffffffffffff81111561039857610397610271565b5b6103a4878288016102db565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103dd826103b2565b9050919050565b6103ed816103d2565b81146103f857600080fd5b50565b60008135905061040a816103e4565b92915050565b6000806000604084860312156104295761042861026c565b5b6000610437868287016103fb565b935050602084013567ffffffffffffffff81111561045857610457610271565b5b610464868287016102db565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156104b5576104b461026c565b5b60006104c3848285016103fb565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126104f8576104f76104cc565b5b80840192508235915067ffffffffffffffff82111561051a576105196104d1565b5b602083019250600182023603831315610536576105356104d6565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610564838561053e565b9350610571838584610549565b82840190509392505050565b600061058a828486610558565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006105da826105c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361060c5761060b610596565b5b60018201905091905056fea2646970667358221220b77eee515b94ec8f7a732b7a4f96bc4a2fc4247a9f4c955eb37f08442fa3b46c64736f6c63430008120033";

type TransferCallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferCallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferCall__factory extends ContractFactory {
  constructor(...args: TransferCallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TransferCall> {
    return super.deploy(overrides || {}) as Promise<TransferCall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TransferCall {
    return super.attach(address) as TransferCall;
  }
  override connect(signer: Signer): TransferCall__factory {
    return super.connect(signer) as TransferCall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferCallInterface {
    return new utils.Interface(_abi) as TransferCallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransferCall {
    return new Contract(address, _abi, signerOrProvider) as TransferCall;
  }
}
