/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenTransfer,
  TokenTransferInterface,
} from "../../contracts/TokenTransfer";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "multi721Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiRecipientTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiTokenTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610862806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806389250f54146100465780638b9ca38f14610062578063bd59b06e1461007e575b600080fd5b610060600480360381019061005b91906104a1565b61009a565b005b61007c6004803603810190610077919061056b565b610148565b005b61009860048036038101906100939190610600565b61026f565b005b60005b82829050811015610141578473ffffffffffffffffffffffffffffffffffffffff166323b872dd33868686868181106100d9576100d8610695565b5b905060200201356040518463ffffffff1660e01b81526004016100fe939291906106ec565b600060405180830381600087803b15801561011857600080fd5b505af115801561012c573d6000803e3d6000fd5b505050508061013a90610752565b905061009d565b5050505050565b818190508585905014610187576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610267578585828181106101a8576101a7610695565b5b90506020020160208101906101bd919061079a565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33868686868181106101ed576101ec610695565b5b905060200201356040518463ffffffff1660e01b8152600401610212939291906106ec565b6020604051808303816000875af1158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906107ff565b508061026090610752565b905061018a565b505050505050565b8181905084849050146102ae576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8484905081101561038e578573ffffffffffffffffffffffffffffffffffffffff166323b872dd338787858181106102ec576102eb610695565b5b9050602002016020810190610301919061079a565b86868681811061031457610313610695565b5b905060200201356040518463ffffffff1660e01b8152600401610339939291906106ec565b6020604051808303816000875af1158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906107ff565b508061038790610752565b90506102b1565b505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cb826103a0565b9050919050565b60006103dd826103c0565b9050919050565b6103ed816103d2565b81146103f857600080fd5b50565b60008135905061040a816103e4565b92915050565b610419816103c0565b811461042457600080fd5b50565b60008135905061043681610410565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104615761046061043c565b5b8235905067ffffffffffffffff81111561047e5761047d610441565b5b60208301915083602082028301111561049a57610499610446565b5b9250929050565b600080600080606085870312156104bb576104ba610396565b5b60006104c9878288016103fb565b94505060206104da87828801610427565b935050604085013567ffffffffffffffff8111156104fb576104fa61039b565b5b6105078782880161044b565b925092505092959194509250565b60008083601f84011261052b5761052a61043c565b5b8235905067ffffffffffffffff81111561054857610547610441565b5b60208301915083602082028301111561056457610563610446565b5b9250929050565b60008060008060006060868803121561058757610586610396565b5b600086013567ffffffffffffffff8111156105a5576105a461039b565b5b6105b188828901610515565b955095505060206105c488828901610427565b935050604086013567ffffffffffffffff8111156105e5576105e461039b565b5b6105f18882890161044b565b92509250509295509295909350565b60008060008060006060868803121561061c5761061b610396565b5b600061062a88828901610427565b955050602086013567ffffffffffffffff81111561064b5761064a61039b565b5b61065788828901610515565b9450945050604086013567ffffffffffffffff81111561067a5761067961039b565b5b6106868882890161044b565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6106cd816103c0565b82525050565b6000819050919050565b6106e6816106d3565b82525050565b600060608201905061070160008301866106c4565b61070e60208301856106c4565b61071b60408301846106dd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061075d826106d3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361078f5761078e610723565b5b600182019050919050565b6000602082840312156107b0576107af610396565b5b60006107be84828501610427565b91505092915050565b60008115159050919050565b6107dc816107c7565b81146107e757600080fd5b50565b6000815190506107f9816107d3565b92915050565b60006020828403121561081557610814610396565b5b6000610823848285016107ea565b9150509291505056fea26469706673582212204ca951125ac01f771955c9696fc6a19f54bae5fa0fbd39dc384866616cbeba3664736f6c63430008120033";

type TokenTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransfer__factory extends ContractFactory {
  constructor(...args: TokenTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenTransfer> {
    return super.deploy(overrides || {}) as Promise<TokenTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenTransfer {
    return super.attach(address) as TokenTransfer;
  }
  override connect(signer: Signer): TokenTransfer__factory {
    return super.connect(signer) as TokenTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferInterface {
    return new utils.Interface(_abi) as TokenTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransfer {
    return new Contract(address, _abi, signerOrProvider) as TokenTransfer;
  }
}
