/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenTransfer,
  TokenTransferInterface,
} from "../../contracts/TokenTransfer";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "multi721Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiRecipientTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiTokenTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610824806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806389250f54146100465780638b9ca38f14610062578063bd59b06e1461007e575b600080fd5b610060600480360381019061005b9190610463565b61009a565b005b61007c6004803603810190610077919061052d565b610148565b005b610098600480360381019061009391906105c2565b61026f565b005b60005b82829050811015610141578473ffffffffffffffffffffffffffffffffffffffff166323b872dd33868686868181106100d9576100d8610657565b5b905060200201356040518463ffffffff1660e01b81526004016100fe939291906106ae565b600060405180830381600087803b15801561011857600080fd5b505af115801561012c573d6000803e3d6000fd5b505050508061013a90610714565b905061009d565b5050505050565b818190508585905014610187576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610267578585828181106101a8576101a7610657565b5b90506020020160208101906101bd919061075c565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33868686868181106101ed576101ec610657565b5b905060200201356040518463ffffffff1660e01b8152600401610212939291906106ae565b6020604051808303816000875af1158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906107c1565b508061026090610714565b905061018a565b505050505050565b8181905084849050146102ae576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8484905081101561038e578573ffffffffffffffffffffffffffffffffffffffff166323b872dd338787858181106102ec576102eb610657565b5b9050602002016020810190610301919061075c565b86868681811061031457610313610657565b5b905060200201356040518463ffffffff1660e01b8152600401610339939291906106ae565b6020604051808303816000875af1158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906107c1565b508061038790610714565b90506102b1565b505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cb826103a0565b9050919050565b6103db816103c0565b81146103e657600080fd5b50565b6000813590506103f8816103d2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610423576104226103fe565b5b8235905067ffffffffffffffff8111156104405761043f610403565b5b60208301915083602082028301111561045c5761045b610408565b5b9250929050565b6000806000806060858703121561047d5761047c610396565b5b600061048b878288016103e9565b945050602061049c878288016103e9565b935050604085013567ffffffffffffffff8111156104bd576104bc61039b565b5b6104c98782880161040d565b925092505092959194509250565b60008083601f8401126104ed576104ec6103fe565b5b8235905067ffffffffffffffff81111561050a57610509610403565b5b60208301915083602082028301111561052657610525610408565b5b9250929050565b60008060008060006060868803121561054957610548610396565b5b600086013567ffffffffffffffff8111156105675761056661039b565b5b610573888289016104d7565b95509550506020610586888289016103e9565b935050604086013567ffffffffffffffff8111156105a7576105a661039b565b5b6105b38882890161040d565b92509250509295509295909350565b6000806000806000606086880312156105de576105dd610396565b5b60006105ec888289016103e9565b955050602086013567ffffffffffffffff81111561060d5761060c61039b565b5b610619888289016104d7565b9450945050604086013567ffffffffffffffff81111561063c5761063b61039b565b5b6106488882890161040d565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61068f816103c0565b82525050565b6000819050919050565b6106a881610695565b82525050565b60006060820190506106c36000830186610686565b6106d06020830185610686565b6106dd604083018461069f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061071f82610695565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610751576107506106e5565b5b600182019050919050565b60006020828403121561077257610771610396565b5b6000610780848285016103e9565b91505092915050565b60008115159050919050565b61079e81610789565b81146107a957600080fd5b50565b6000815190506107bb81610795565b92915050565b6000602082840312156107d7576107d6610396565b5b60006107e5848285016107ac565b9150509291505056fea26469706673582212202b4e9456b385f31130728de54c02c19d667aaa16806c06bcbb7b85d55ab1612d64736f6c63430008120033";

type TokenTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransfer__factory extends ContractFactory {
  constructor(...args: TokenTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenTransfer> {
    return super.deploy(overrides || {}) as Promise<TokenTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenTransfer {
    return super.attach(address) as TokenTransfer;
  }
  override connect(signer: Signer): TokenTransfer__factory {
    return super.connect(signer) as TokenTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferInterface {
    return new utils.Interface(_abi) as TokenTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransfer {
    return new Contract(address, _abi, signerOrProvider) as TokenTransfer;
  }
}
