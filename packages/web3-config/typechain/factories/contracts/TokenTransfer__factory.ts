/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenTransfer,
  TokenTransferInterface,
} from "../../contracts/TokenTransfer";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "multi721Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_offset",
        type: "uint256[]",
      },
    ],
    name: "multiCollection721Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiRecipientTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiTokenTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac9806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636f0e4c781461005157806389250f541461006d5780638b9ca38f14610089578063bd59b06e146100a5575b600080fd5b61006b60048036038101906100669190610661565b6100c1565b005b6100876004803603810190610082919061072a565b610242565b005b6100a3600480360381019061009e919061079e565b6102f0565b005b6100bf60048036038101906100ba9190610833565b610417565b005b818190508787905014610100576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b888890508110156102375760005b848483818110610125576101246108c8565b5b905060200201358110156101fe57898983818110610146576101456108c8565b5b905060200201602081019061015b91906108f7565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd338a8a8a8887610186919061095d565b818110610196576101956108c8565b5b905060200201356040518463ffffffff1660e01b81526004016101bb939291906109af565b600060405180830381600087803b1580156101d557600080fd5b505af11580156101e9573d6000803e3d6000fd5b50505050806101f7906109e6565b9050610112565b50838382818110610212576102116108c8565b5b9050602002013582610224919061095d565b915080610230906109e6565b9050610104565b505050505050505050565b60005b828290508110156102e9578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3386868686818110610281576102806108c8565b5b905060200201356040518463ffffffff1660e01b81526004016102a6939291906109af565b600060405180830381600087803b1580156102c057600080fd5b505af11580156102d4573d6000803e3d6000fd5b50505050806102e2906109e6565b9050610245565b5050505050565b81819050858590501461032f576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8585905081101561040f578585828181106103505761034f6108c8565b5b905060200201602081019061036591906108f7565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3386868686818110610395576103946108c8565b5b905060200201356040518463ffffffff1660e01b81526004016103ba939291906109af565b6020604051808303816000875af11580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190610a66565b5080610408906109e6565b9050610332565b505050505050565b818190508484905014610456576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015610536578573ffffffffffffffffffffffffffffffffffffffff166323b872dd33878785818110610494576104936108c8565b5b90506020020160208101906104a991906108f7565b8686868181106104bc576104bb6108c8565b5b905060200201356040518463ffffffff1660e01b81526004016104e1939291906109af565b6020604051808303816000875af1158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190610a66565b508061052f906109e6565b9050610459565b505050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261056d5761056c610548565b5b8235905067ffffffffffffffff81111561058a5761058961054d565b5b6020830191508360208202830111156105a6576105a5610552565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105d8826105ad565b9050919050565b6105e8816105cd565b81146105f357600080fd5b50565b600081359050610605816105df565b92915050565b60008083601f84011261062157610620610548565b5b8235905067ffffffffffffffff81111561063e5761063d61054d565b5b60208301915083602082028301111561065a57610659610552565b5b9250929050565b60008060008060008060006080888a0312156106805761067f61053e565b5b600088013567ffffffffffffffff81111561069e5761069d610543565b5b6106aa8a828b01610557565b975097505060206106bd8a828b016105f6565b955050604088013567ffffffffffffffff8111156106de576106dd610543565b5b6106ea8a828b0161060b565b9450945050606088013567ffffffffffffffff81111561070d5761070c610543565b5b6107198a828b0161060b565b925092505092959891949750929550565b600080600080606085870312156107445761074361053e565b5b6000610752878288016105f6565b9450506020610763878288016105f6565b935050604085013567ffffffffffffffff81111561078457610783610543565b5b6107908782880161060b565b925092505092959194509250565b6000806000806000606086880312156107ba576107b961053e565b5b600086013567ffffffffffffffff8111156107d8576107d7610543565b5b6107e488828901610557565b955095505060206107f7888289016105f6565b935050604086013567ffffffffffffffff81111561081857610817610543565b5b6108248882890161060b565b92509250509295509295909350565b60008060008060006060868803121561084f5761084e61053e565b5b600061085d888289016105f6565b955050602086013567ffffffffffffffff81111561087e5761087d610543565b5b61088a88828901610557565b9450945050604086013567ffffffffffffffff8111156108ad576108ac610543565b5b6108b98882890161060b565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561090d5761090c61053e565b5b600061091b848285016105f6565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061096882610924565b915061097383610924565b925082820190508082111561098b5761098a61092e565b5b92915050565b61099a816105cd565b82525050565b6109a981610924565b82525050565b60006060820190506109c46000830186610991565b6109d16020830185610991565b6109de60408301846109a0565b949350505050565b60006109f182610924565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2357610a2261092e565b5b600182019050919050565b60008115159050919050565b610a4381610a2e565b8114610a4e57600080fd5b50565b600081519050610a6081610a3a565b92915050565b600060208284031215610a7c57610a7b61053e565b5b6000610a8a84828501610a51565b9150509291505056fea264697066735822122037bbe98abe948b70d8d4c869edb46888359ca5fb880c9428b61e338257f8e1fb64736f6c63430008120033";

type TokenTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransfer__factory extends ContractFactory {
  constructor(...args: TokenTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenTransfer> {
    return super.deploy(overrides || {}) as Promise<TokenTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenTransfer {
    return super.attach(address) as TokenTransfer;
  }
  override connect(signer: Signer): TokenTransfer__factory {
    return super.connect(signer) as TokenTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferInterface {
    return new utils.Interface(_abi) as TokenTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransfer {
    return new Contract(address, _abi, signerOrProvider) as TokenTransfer;
  }
}
