/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenTransfer,
  TokenTransferInterface,
} from "../../contracts/TokenTransfer";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiRecipientTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiTokenTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061079c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638b9ca38f1461003b578063bd59b06e14610057575b600080fd5b610055600480360381019061005091906103e4565b610073565b005b610071600480360381019061006c919061050d565b61019a565b005b8181905085859050146100b2576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610192578585828181106100d3576100d26105a2565b5b90506020020160208101906100e891906105d1565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3386868686818110610118576101176105a2565b5b905060200201356040518463ffffffff1660e01b815260040161013d93929190610626565b6020604051808303816000875af115801561015c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101809190610695565b508061018b906106f1565b90506100b5565b505050505050565b8181905084849050146101d9576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b848490508110156102b9578573ffffffffffffffffffffffffffffffffffffffff166323b872dd33878785818110610217576102166105a2565b5b905060200201602081019061022c9190610739565b86868681811061023f5761023e6105a2565b5b905060200201356040518463ffffffff1660e01b815260040161026493929190610626565b6020604051808303816000875af1158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610695565b50806102b2906106f1565b90506101dc565b505050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102f0576102ef6102cb565b5b8235905067ffffffffffffffff81111561030d5761030c6102d0565b5b602083019150836020820283011115610329576103286102d5565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061035b82610330565b9050919050565b61036b81610350565b811461037657600080fd5b50565b60008135905061038881610362565b92915050565b60008083601f8401126103a4576103a36102cb565b5b8235905067ffffffffffffffff8111156103c1576103c06102d0565b5b6020830191508360208202830111156103dd576103dc6102d5565b5b9250929050565b600080600080600060608688031215610400576103ff6102c1565b5b600086013567ffffffffffffffff81111561041e5761041d6102c6565b5b61042a888289016102da565b9550955050602061043d88828901610379565b935050604086013567ffffffffffffffff81111561045e5761045d6102c6565b5b61046a8882890161038e565b92509250509295509295909350565b600061048482610350565b9050919050565b61049481610479565b811461049f57600080fd5b50565b6000813590506104b18161048b565b92915050565b60008083601f8401126104cd576104cc6102cb565b5b8235905067ffffffffffffffff8111156104ea576104e96102d0565b5b602083019150836020820283011115610506576105056102d5565b5b9250929050565b600080600080600060608688031215610529576105286102c1565b5b6000610537888289016104a2565b955050602086013567ffffffffffffffff811115610558576105576102c6565b5b610564888289016104b7565b9450945050604086013567ffffffffffffffff811115610587576105866102c6565b5b6105938882890161038e565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156105e7576105e66102c1565b5b60006105f5848285016104a2565b91505092915050565b61060781610350565b82525050565b6000819050919050565b6106208161060d565b82525050565b600060608201905061063b60008301866105fe565b61064860208301856105fe565b6106556040830184610617565b949350505050565b60008115159050919050565b6106728161065d565b811461067d57600080fd5b50565b60008151905061068f81610669565b92915050565b6000602082840312156106ab576106aa6102c1565b5b60006106b984828501610680565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106fc8261060d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361072e5761072d6106c2565b5b600182019050919050565b60006020828403121561074f5761074e6102c1565b5b600061075d84828501610379565b9150509291505056fea2646970667358221220906b1cf6d57149531cd768e9ee632c0477353e394eef54c282b4330a6bd6e18064736f6c63430008120033";

type TokenTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransfer__factory extends ContractFactory {
  constructor(...args: TokenTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenTransfer> {
    return super.deploy(overrides || {}) as Promise<TokenTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenTransfer {
    return super.attach(address) as TokenTransfer;
  }
  override connect(signer: Signer): TokenTransfer__factory {
    return super.connect(signer) as TokenTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferInterface {
    return new utils.Interface(_abi) as TokenTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransfer {
    return new Contract(address, _abi, signerOrProvider) as TokenTransfer;
  }
}
