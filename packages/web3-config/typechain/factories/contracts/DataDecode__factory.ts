/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DataDecode,
  DataDecodeInterface,
} from "../../contracts/DataDecode";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "decodeData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "printAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061067e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063025def631461003b578063447a06f514610057575b600080fd5b6100556004803603810190610050919061025b565b610073565b005b610071600480360381019061006c91906102fe565b6100c7565b005b60005b828290508110156100c2576100b18383838181106100975761009661034b565b5b90506020020160208101906100ac91906103d8565b610120565b806100bb9061043e565b9050610076565b505050565b600082828101906100d891906105d5565b905060005b815181101561011a576101098282815181106100fc576100fb61034b565b5b6020026020010151610120565b806101139061043e565b90506100dd565b50505050565b6101b681604051602401610134919061062d565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506101b9565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261021b5761021a6101f6565b5b8235905067ffffffffffffffff811115610238576102376101fb565b5b60208301915083602082028301111561025457610253610200565b5b9250929050565b60008060208385031215610272576102716101ec565b5b600083013567ffffffffffffffff8111156102905761028f6101f1565b5b61029c85828601610205565b92509250509250929050565b60008083601f8401126102be576102bd6101f6565b5b8235905067ffffffffffffffff8111156102db576102da6101fb565b5b6020830191508360018202830111156102f7576102f6610200565b5b9250929050565b60008060208385031215610315576103146101ec565b5b600083013567ffffffffffffffff811115610333576103326101f1565b5b61033f858286016102a8565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103a58261037a565b9050919050565b6103b58161039a565b81146103c057600080fd5b50565b6000813590506103d2816103ac565b92915050565b6000602082840312156103ee576103ed6101ec565b5b60006103fc848285016103c3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061044982610434565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361047b5761047a610405565b5b600182019050919050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104cf82610486565b810181811067ffffffffffffffff821117156104ee576104ed610497565b5b80604052505050565b60006105016101e2565b905061050d82826104c6565b919050565b600067ffffffffffffffff82111561052d5761052c610497565b5b602082029050602081019050919050565b600061055161054c84610512565b6104f7565b9050808382526020820190506020840283018581111561057457610573610200565b5b835b8181101561059d578061058988826103c3565b845260208401935050602081019050610576565b5050509392505050565b600082601f8301126105bc576105bb6101f6565b5b81356105cc84826020860161053e565b91505092915050565b6000602082840312156105eb576105ea6101ec565b5b600082013567ffffffffffffffff811115610609576106086101f1565b5b610615848285016105a7565b91505092915050565b6106278161039a565b82525050565b6000602082019050610642600083018461061e565b9291505056fea26469706673582212209ed92388d94c6c512a1cecea692fee55be5a1d3af2819a256e1670cc455564e764736f6c63430008120033";

type DataDecodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataDecodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataDecode__factory extends ContractFactory {
  constructor(...args: DataDecodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataDecode> {
    return super.deploy(overrides || {}) as Promise<DataDecode>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DataDecode {
    return super.attach(address) as DataDecode;
  }
  override connect(signer: Signer): DataDecode__factory {
    return super.connect(signer) as DataDecode__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataDecodeInterface {
    return new utils.Interface(_abi) as DataDecodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataDecode {
    return new Contract(address, _abi, signerOrProvider) as DataDecode;
  }
}
