/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Swosh, SwoshInterface } from "../../contracts/Swosh";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "batchTransferERC1155",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "batchTransferERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "batchTransferERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "_recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_offset",
        type: "uint256",
      },
    ],
    name: "megaTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "_recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiBatchTransferERC1155",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "_recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "multiBatchTransferERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "_recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "multiBatchTransferERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610fc2806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806395da0adc1161005b57806395da0adc146100d6578063d1d5c43c146100f2578063ec47b1791461010e578063fded7bfb1461012a5761007d565b8063486ee94c146100825780636bcad04a1461009e57806370b27b6d146100ba575b600080fd5b61009c60048036038101906100979190610976565b610146565b005b6100b860048036038101906100b39190610a3f565b610213565b005b6100d460048036038101906100cf9190610a3f565b61032b565b005b6100f060048036038101906100eb9190610af3565b610443565b005b61010c60048036038101906101079190610bbe565b6104f4565b005b61012860048036038101906101239190610af3565b6104fd565b005b610144600480360381019061013f9190610c87565b6105ae565b005b838390508787905014610185576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b87879050811015610209576101f88888838181106101a9576101a8610d70565b5b90506020020160208101906101be9190610d9f565b878787858181106101d2576101d1610d70565b5b905060200201358686868181106101ec576101eb610d70565b5b905060200201356106e2565b8061020290610dfb565b9050610188565b5050505050505050565b818190508686905014610252576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838390508686905014610291576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b86869050811015610322576103118787838181106102b5576102b4610d70565b5b90506020020160208101906102ca9190610d9f565b8686848181106102dd576102dc610d70565b5b90506020020160208101906102f29190610d9f565b85858581811061030557610304610d70565b5b90506020020135610759565b8061031b90610dfb565b9050610294565b50505050505050565b83839050868690501461036a576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181905086869050146103a9576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8686905081101561043a576104298787838181106103cd576103cc610d70565b5b90506020020160208101906103e29190610d9f565b8686848181106103f5576103f4610d70565b5b905060200201602081019061040a9190610d9f565b85858581811061041d5761041c610d70565b5b905060200201356107cd565b8061043390610dfb565b90506103ac565b50505050505050565b818190508585905014610482576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b858590508110156104ec576104db8686838181106104a6576104a5610d70565b5b90506020020160208101906104bb9190610d9f565b858585858181106104cf576104ce610d70565b5b90506020020135610759565b806104e590610dfb565b9050610485565b505050505050565b50505050505050565b81819050858590501461053c576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b858590508110156105a6576105958686838181106105605761055f610d70565b5b90506020020160208101906105759190610d9f565b8585858581811061058957610588610d70565b5b905060200201356107cd565b8061059f90610dfb565b905061053f565b505050505050565b8383905088889050146105ed576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85859050888890501461062c576040517f22ee6ae700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b888890508110156106d7576106c68989838181106106505761064f610d70565b5b90506020020160208101906106659190610d9f565b88888481811061067857610677610d70565b5b905060200201602081019061068d9190610d9f565b8787858181106106a05761069f610d70565b5b905060200201358686868181106106ba576106b9610d70565b5b905060200201356106e2565b806106d090610dfb565b905061062f565b505050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff1663f242432a338585856040518563ffffffff1660e01b81526004016107219493929190610e98565b600060405180830381600087803b15801561073b57600080fd5b505af115801561074f573d6000803e3d6000fd5b5050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b815260040161079693929190610ef0565b600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b50505050505050565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b815260040161080a93929190610ef0565b6020604051808303816000875af1158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190610f5f565b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126108825761088161085d565b5b8235905067ffffffffffffffff81111561089f5761089e610862565b5b6020830191508360208202830111156108bb576108ba610867565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ed826108c2565b9050919050565b6108fd816108e2565b811461090857600080fd5b50565b60008135905061091a816108f4565b92915050565b60008083601f8401126109365761093561085d565b5b8235905067ffffffffffffffff81111561095357610952610862565b5b60208301915083602082028301111561096f5761096e610867565b5b9250929050565b60008060008060008060006080888a03121561099557610994610853565b5b600088013567ffffffffffffffff8111156109b3576109b2610858565b5b6109bf8a828b0161086c565b975097505060206109d28a828b0161090b565b955050604088013567ffffffffffffffff8111156109f3576109f2610858565b5b6109ff8a828b01610920565b9450945050606088013567ffffffffffffffff811115610a2257610a21610858565b5b610a2e8a828b01610920565b925092505092959891949750929550565b60008060008060008060608789031215610a5c57610a5b610853565b5b600087013567ffffffffffffffff811115610a7a57610a79610858565b5b610a8689828a0161086c565b9650965050602087013567ffffffffffffffff811115610aa957610aa8610858565b5b610ab589828a0161086c565b9450945050604087013567ffffffffffffffff811115610ad857610ad7610858565b5b610ae489828a01610920565b92509250509295509295509295565b600080600080600060608688031215610b0f57610b0e610853565b5b600086013567ffffffffffffffff811115610b2d57610b2c610858565b5b610b398882890161086c565b95509550506020610b4c8882890161090b565b935050604086013567ffffffffffffffff811115610b6d57610b6c610858565b5b610b7988828901610920565b92509250509295509295909350565b6000819050919050565b610b9b81610b88565b8114610ba657600080fd5b50565b600081359050610bb881610b92565b92915050565b60008060008060008060006080888a031215610bdd57610bdc610853565b5b600088013567ffffffffffffffff811115610bfb57610bfa610858565b5b610c078a828b0161086c565b9750975050602088013567ffffffffffffffff811115610c2a57610c29610858565b5b610c368a828b0161086c565b9550955050604088013567ffffffffffffffff811115610c5957610c58610858565b5b610c658a828b01610920565b93509350506060610c788a828b01610ba9565b91505092959891949750929550565b6000806000806000806000806080898b031215610ca757610ca6610853565b5b600089013567ffffffffffffffff811115610cc557610cc4610858565b5b610cd18b828c0161086c565b9850985050602089013567ffffffffffffffff811115610cf457610cf3610858565b5b610d008b828c0161086c565b9650965050604089013567ffffffffffffffff811115610d2357610d22610858565b5b610d2f8b828c01610920565b9450945050606089013567ffffffffffffffff811115610d5257610d51610858565b5b610d5e8b828c01610920565b92509250509295985092959890939650565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610db557610db4610853565b5b6000610dc38482850161090b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0682610b88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e3857610e37610dcc565b5b600182019050919050565b610e4c816108e2565b82525050565b610e5b81610b88565b82525050565b600082825260208201905092915050565b50565b6000610e82600083610e61565b9150610e8d82610e72565b600082019050919050565b600060a082019050610ead6000830187610e43565b610eba6020830186610e43565b610ec76040830185610e52565b610ed46060830184610e52565b8181036080830152610ee581610e75565b905095945050505050565b6000606082019050610f056000830186610e43565b610f126020830185610e43565b610f1f6040830184610e52565b949350505050565b60008115159050919050565b610f3c81610f27565b8114610f4757600080fd5b50565b600081519050610f5981610f33565b92915050565b600060208284031215610f7557610f74610853565b5b6000610f8384828501610f4a565b9150509291505056fea26469706673582212208e3c0f21c51ec2df1bc9a25ced358a66f35a1d244365bfb8e0c797e5c5e14e2f64736f6c63430008120033";

type SwoshConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwoshConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swosh__factory extends ContractFactory {
  constructor(...args: SwoshConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Swosh> {
    return super.deploy(overrides || {}) as Promise<Swosh>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Swosh {
    return super.attach(address) as Swosh;
  }
  override connect(signer: Signer): Swosh__factory {
    return super.connect(signer) as Swosh__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwoshInterface {
    return new utils.Interface(_abi) as SwoshInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Swosh {
    return new Contract(address, _abi, signerOrProvider) as Swosh;
  }
}
